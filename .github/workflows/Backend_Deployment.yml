name: Backend Deployment
on:
  push:
    branches: [main, dev]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout GitHub Action"
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: "Login via Azure CLI"
        uses: azure/login@v2
        with:
          creds: |
            {
              "clientSecret": "${{ secrets.AZURE_SP_PASSWORD }}",
              "subscriptionId": "${{ secrets.AZURE_SP_SUBSCRIPTIION_ID }}",
              "tenantId": "${{ secrets.AZURE_SP_TENANT_ID }}",
              "clientId": "${{ secrets.AZURE_SP_APP_ID }}"
            }

      - name: Log in to Azure Container Registry
        run: |
          az acr login --name ${{ vars.DOCKER_REGISTRY }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_IMAGE_NAME }}
          tags: |
            type=sha
            type=raw,value=latest-${{ github.ref_name }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          push: true
          context: backend
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Log out from Azure Container Registry
        run: docker logout ${{ vars.DOCKER_REGISTRY }}

  deploy:
    name: deploy
    needs: [build]
    # note that the vm needs to have docker, azure cli installed
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout GitHub Action"
        uses: actions/checkout@v4

      - name: Read script contents
        id: script
        uses: jaywcjlove/github-action-read-file@main
        with:
          path: .github/workflows/scripts/deploy.sh

      - name: "Deploy to Azure VM"
        uses: appleboy/ssh-action@v1.0.3
        env:
          APP_ID: ${{ secrets.AZURE_SP_APP_ID }}
          PASSWORD: ${{ secrets.AZURE_SP_PASSWORD }}
          TENANT: ${{ secrets.AZURE_SP_TENANT_ID }}
          REGISTRY: ${{ vars.DOCKER_REGISTRY }}
          IMAGE_NAME: ${{ vars.DOCKER_IMAGE_NAME }}
          GITHUB_SHA: $GITHUB_SHA
          CONTAINER_NAME: ${{ github.ref == 'refs/heads/main' && vars.CONTAINER_NAME_PROD || vars.CONTAINER_NAME_DEV }}
          NUM_WORKERS: ${{ github.ref == 'refs/heads/main' && vars.CONTAINER_WORKERS_PROD || vars.CONTAINER_WORKERS_DEV }}
          CONTAINER_PORT: ${{ github.ref == 'refs/heads/main' && vars.CONTAINER_PORT_PROD || vars.CONTAINER_PORT_DEV }}
          LOGS_VOLUME: ${{ github.ref == 'refs/heads/main' && vars.LOGS_VOLUME_PROD || vars.LOGS_VOLUME_DEV }}
          VJUDGE_SESSION_VOLUME: ${{ vars.VJUDGE_SESSION_VOLUME }}
          ENVIRONMENT_VARIABLES: ${{ github.ref == 'refs/heads/main' && secrets.ENV_PRODUCTION || secrets.ENV_DEVELOPMENT }}
        with:
          host: ${{ secrets.VM_IP }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script_stop: true
          envs: APP_ID, PASSWORD, TENANT, REGISTRY, IMAGE_NAME, GITHUB_SHA, CONTAINER_NAME, NUM_WORKERS, CONTAINER_PORT, LOGS_VOLUME, VJUDGE_SESSION_VOLUME, ENVIRONMENT_VARIABLES
          script: ${{ steps.script.outputs.content }}
